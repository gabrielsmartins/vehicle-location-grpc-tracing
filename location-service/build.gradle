buildscript {
	apply from: 'repositories.gradle', to: buildscript
	ext {
		springBootVersion = '3.2.4'
		springDependencyManagamentVersion = '1.1.4'
		asciidoctorVersion = '3.3.2'
		protobufPluginVersion = '0.9.4'
	}
}

plugins {
	id'java'
	id 'org.springframework.boot' version "${springBootVersion}"
	id 'io.spring.dependency-management' version "${springDependencyManagamentVersion}"
	id 'org.asciidoctor.jvm.convert' version "${asciidoctorVersion}"
	id 'com.google.protobuf' version "${protobufPluginVersion}"
	id 'idea'
	id 'eclipse'
}

group = 'br.gasmartins.locations'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility JavaVersion.VERSION_17
	targetCompatibility JavaVersion.VERSION_17
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

apply from: 'repositories.gradle'

ext {
	set('snippetsDir', file("build/generated-snippets"))
	set('springBootVersion', "3.2.4")
	set('springCloudVersion', "2023.0.1")
	set('springBootAdminVersion', "3.2.3")
	set('springGrpcVersion', "3.0.0.RELEASE")
	set('lombokVersion', "1.18.32")
	set('otelVersion', "1.36.0")
	set('feignOkHttpVersion', "13.1")
	set('grpcVersion', "1.62.2")
	set('protobufVersion', "3.25.0")
	set('annotationsApiVersion', "6.0.53")
	set('googleProtoVersion', "2.28.0")
	set('logstashVersion', "7.4")
	set('instancioVersion', "3.5.1")
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter'
	implementation 'org.springframework.boot:spring-boot-starter-actuator'

	implementation "net.devh:grpc-server-spring-boot-starter:${springGrpcVersion}"
	implementation "net.devh:grpc-client-spring-boot-starter:${springGrpcVersion}"

	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-validation'

	implementation 'org.springframework.cloud:spring-cloud-starter-circuitbreaker-resilience4j'
	implementation 'org.springframework.cloud:spring-cloud-starter-config'

	implementation 'org.springframework.cloud:spring-cloud-starter-bootstrap'
	implementation 'org.springframework.cloud:spring-cloud-starter-openfeign'
	implementation "io.github.openfeign:feign-core:${feignOkHttpVersion}"
	implementation "io.github.openfeign:feign-okhttp:${feignOkHttpVersion}"
	implementation "io.github.openfeign:feign-micrometer:${feignOkHttpVersion}"

	implementation 'de.codecentric:spring-boot-admin-starter-client'
	implementation 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-client'

	compileOnly "org.projectlombok:lombok:${lombokVersion}"
	annotationProcessor "org.projectlombok:lombok:${lombokVersion}"
	testCompileOnly "org.projectlombok:lombok:${lombokVersion}"
	testAnnotationProcessor "org.projectlombok:lombok:${lombokVersion}"

	implementation 'io.micrometer:micrometer-observation'
	implementation 'io.micrometer:micrometer-tracing'
	implementation 'io.micrometer:micrometer-tracing-bridge-otel'
	runtimeOnly 'io.micrometer:micrometer-registry-prometheus'

	implementation "io.opentelemetry:opentelemetry-exporter-otlp"

	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'

	implementation "net.logstash.logback:logstash-logback-encoder:${logstashVersion}"

	implementation 'io.grpc:grpc-auth'
	implementation 'io.grpc:grpc-alts'
	implementation 'io.grpc:grpc-netty'
	implementation 'io.grpc:grpc-netty-shaded'
	implementation 'io.grpc:grpc-googleapis'
	implementation 'io.grpc:grpc-protobuf'
	implementation 'io.grpc:grpc-stub'
	implementation 'com.google.protobuf:protobuf-java'
	implementation 'com.google.protobuf:protobuf-java-util'
	implementation "com.google.api.grpc:proto-google-common-protos:${googleProtoVersion}"

	if (JavaVersion.current().isJava9Compatible()) {
		// Workaround for @javax.annotation.Generated
		// see: https://github.com/grpc/grpc-java/issues/3633
		compileOnly "org.apache.tomcat:annotations-api:${annotationsApiVersion}"
		annotationProcessor "jakarta.annotation:jakarta.annotation-api"
	}

	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.boot:spring-boot-testcontainers'

	testImplementation 'io.grpc:grpc-testing'
	testImplementation "org.instancio:instancio-junit:${instancioVersion}"
}

dependencyManagement {
	imports {
		mavenBom "org.springframework.boot:spring-boot-dependencies:${springBootVersion}"
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
		mavenBom "de.codecentric:spring-boot-admin-dependencies:${springBootAdminVersion}"
		mavenBom "io.grpc:grpc-bom:${grpcVersion}"
		mavenBom "com.google.protobuf:protobuf-bom:${protobufVersion}"
		mavenBom "io.opentelemetry:opentelemetry-bom:${otelVersion}"
	}
}

tasks.named('test') {
	outputs.dir snippetsDir
	useJUnitPlatform()
}

tasks.named('asciidoctor') {
	inputs.dir snippetsDir
	dependsOn test
}

protobuf {
	protoc {
		artifact = "com.google.protobuf:protoc:${protobufVersion}"
	}
	plugins {
		grpc {
			artifact = "io.grpc:protoc-gen-grpc-java:${grpcVersion}"
		}
	}
	generateProtoTasks {
		all()*.plugins {
			grpc {

			}
		}
	}
}

sourceSets {
	main {
		java {
			srcDirs 'build/generated/source/proto/main/grpc'
			srcDirs 'build/generated/source/proto/main/java'
		}
	}
}

// Optional
eclipse {
	classpath {
		file.beforeMerged { cp ->
			def generatedGrpcFolder = new org.gradle.plugins.ide.eclipse.model.SourceFolder('src/generated/main/grpc', null);
			generatedGrpcFolder.entryAttributes['ignore_optional_problems'] = 'true';
			cp.entries.add( generatedGrpcFolder );
			def generatedJavaFolder = new org.gradle.plugins.ide.eclipse.model.SourceFolder('src/generated/main/java', null);
			generatedJavaFolder.entryAttributes['ignore_optional_problems'] = 'true';
			cp.entries.add( generatedJavaFolder );
		}
	}
}

// Optional
idea {
	module {
		sourceDirs += file("src/generated/main/java")
		sourceDirs += file("src/generated/main/grpc")
		generatedSourceDirs += file("src/generated/main/java")
		generatedSourceDirs += file("src/generated/main/grpc")
	}
}